#include<iostream>
#include<string>
#include<vector>
#include<queue>

#define nullptr   NULL;
using namespace std;

 struct BinNode {
     BinNode(int n) :data(n), lchild(NULL), rchild(NULL) {}
    int data;
    BinNode* lchild;      BinNode* rchild;

};
 BinNode* buildTree(vector<int> arr) {
     if (arr.size() == 0)
         return NULL;
     BinNode* root = new BinNode(arr[0]);
     queue<BinNode*> q;
     q.push(root);
     int i = 1;
     while (i < arr.size()) {
         BinNode* node = q.front();
         q.pop();
         if (node != NULL) {
             BinNode* l = (arr[i] != -1) ? new BinNode(arr[i]) : nullptr;
             BinNode* r = ((i + 1) < arr.size() && arr[i + 1] != -1) ? new BinNode(arr[i + 1]) : nullptr;
             node->lchild = l;
             node->rchild = r;
             q.push(l);
             q.push(r);
             i += 2;
         }
     }
     return root;
 };

void level(BinNode* root){
    queue<BinNode*> q;
    q.push(root);
    q.push(NULL);
    float sum=0.0;
    int count=0;
    while(!q.empty())
    {   
        if(q.front()->lchild!=NULL)
        {
              q.push(q.front()->lchild);
        }
        if(q.front()->rchild!=NULL)
        {
              q.push(q.front()->rchild);
        }
        sum=sum+q.front()->data;
        count++;
        q.pop();
        //cout<<"sum:"<<sum<<"  count:"<<count<<endl;
        if(q.front()==NULL) {
            if(q.size()!=1) q.push(NULL);
            float ave=sum/count;
            
            //cout<<"sum:"<<sum<<"  count:"<<count;
           // cout<<"average:"<<ave<<endl;
           cout<<ave<<" ";
            sum=0;
            count=0;
            q.pop();
        }
    }
}

int main() {
    int v;
    vector<int> a;
   // cout << "enter the values one by one(must be >= 0):" << endl;
    while (cin >> v) {
        a.push_back(v);
        if (cin.get() == '\n')
            break;
    }
    BinNode* root = buildTree(a);
    
    level(root);
    return 0;
}

