#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <iostream>
#include <algorithm>
#include <stdexcept>
#include <time.h>

#ifndef BASE64_H_C0CE2A47_D10E_42C9_A27C_C883944E704A
#define BASE64_H_C0CE2A47_D10E_42C9_A27C_C883944E704A

#include <string>

#if __cplusplus >= 201703L
#include <string_view>
#endif  // __cplusplus >= 201703L

std::string base64_encode     (std::string const& s, bool url = false);
std::string base64_encode_pem (std::string const& s);
std::string base64_encode_mime(std::string const& s);

std::string base64_decode(std::string const& s, bool remove_linebreaks = false);
std::string base64_encode(unsigned char const*, size_t len, bool url = false);

#if __cplusplus >= 201703L
//
// Interface with std::string_view rather than const std::string&
// Requires C++17
// Provided by Yannic Bonenberger (https://github.com/Yannic)
//
std::string base64_encode     (std::string_view s, bool url = false);
std::string base64_encode_pem (std::string_view s);
std::string base64_encode_mime(std::string_view s);

std::string base64_decode(std::string_view s, bool remove_linebreaks = false);
#endif  // __cplusplus >= 201703L

#endif

std::string confusion_string(std::string &str);
std::string unconfusion_str(std::string &str);

using namespace std;

#define MYPORT  3205
#define QUEUE   20
#define BUFFER_SIZE 1024

int Socket(); 
string Response(string & str);
string Byte2str(char byte[BUFFER_SIZE]);
char* str2byte(string&str);

int main()
{
    Socket();
    
}

int Socket(){
    ///定义sockfd
    int server_sockfd = socket(AF_INET,SOCK_STREAM, 0);
 
    ///定义sockaddr_in
    struct sockaddr_in server_sockaddr;
    server_sockaddr.sin_family = AF_INET;
    server_sockaddr.sin_port = htons(MYPORT);
    server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);
 
    ///bind，成功返回0，出错返回-1
    if(bind(server_sockfd,(struct sockaddr *)&server_sockaddr,sizeof(server_sockaddr))==-1)
    {
        perror("bind");
        exit(1);
    }
    printf("Bind success!\n");
    ///listen，成功返回0，出错返回-1
    if(listen(server_sockfd,QUEUE) == -1)
    {
        perror("listen");
        exit(1);
    }
 	printf("Listen success!\n");
    ///客户端套接字
    char buffer[BUFFER_SIZE];
    struct sockaddr_in client_addr;
    socklen_t length = sizeof(client_addr);
 
    ///成功返回非负描述字，出错返回-1
    int conn = accept(server_sockfd, (struct sockaddr*)&client_addr, &length);
    if(conn<0)
    {
        perror("connect");
        exit(1);
    }
    printf("Connect success!\n");
    while(1){
	//服务器返回buffer给客户端
        memset(buffer,0,sizeof(buffer));
        int len = recv(conn, buffer, sizeof(buffer),0);
        if(len<=0) break;
        fputs(buffer, stdout);
        // 将收到的信息判断后根据情况返回
        char *reply;
        string str = Byte2str(buffer);
        str = Response(str);
        reply = str2byte(str);
        len = sizeof(reply);
        send(conn, reply, len, 0);
    }
    close(conn);
    close(server_sockfd);
    return 0;
}



static const char* base64_chars[2] = {
             "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
             "abcdefghijklmnopqrstuvwxyz"
             "0123456789"
             "+/",

             "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
             "abcdefghijklmnopqrstuvwxyz"
             "0123456789"
             "-_"};

static unsigned int pos_of_char(const unsigned char chr) {
 //
 // Return the position of chr within base64_encode()
 //

    if      (chr >= 'A' && chr <= 'Z') return chr - 'A';
    else if (chr >= 'a' && chr <= 'z') return chr - 'a' + ('Z' - 'A')               + 1;
    else if (chr >= '0' && chr <= '9') return chr - '0' + ('Z' - 'A') + ('z' - 'a') + 2;
    else if (chr == '+' || chr == '-') return 62; // Be liberal with input and accept both url ('-') and non-url ('+') base 64 characters (
    else if (chr == '/' || chr == '_') return 63; // Ditto for '/' and '_'
    else
 //
 // 2020-10-23: Throw std::exception rather than const char*
 //(Pablo Martin-Gomez, https://github.com/Bouska)
 //
    throw std::runtime_error("Input is not valid base64-encoded data.");
}

static std::string insert_linebreaks(std::string str, size_t distance) {
 //
 // Provided by https://github.com/JomaCorpFX, adapted by me.
 //
    if (!str.length()) {
        return "";
    }

    size_t pos = distance;

    while (pos < str.size()) {
        str.insert(pos, "\n");
        pos += distance + 1;
    }

    return str;
}

template <typename String, unsigned int line_length>
static std::string encode_with_line_breaks(String s) {
  return insert_linebreaks(base64_encode(s, false), line_length);
}

template <typename String>
static std::string encode_pem(String s) {
  return encode_with_line_breaks<String, 64>(s);
}

template <typename String>
static std::string encode_mime(String s) {
  return encode_with_line_breaks<String, 76>(s);
}

template <typename String>
static std::string encode(String s, bool url) {
  return base64_encode(reinterpret_cast<const unsigned char*>(s.data()), s.length(), url);
}

std::string base64_encode(unsigned char const* bytes_to_encode, size_t in_len, bool url) {

    size_t len_encoded = (in_len +2) / 3 * 4;

    unsigned char trailing_char = url ? '.' : '=';

 //
 // Choose set of base64 characters. They differ
 // for the last two positions, depending on the url
 // parameter.
 // A bool (as is the parameter url) is guaranteed
 // to evaluate to either 0 or 1 in C++ therefore,
 // the correct character set is chosen by subscripting
 // base64_chars with url.
 //
    const char* base64_chars_ = base64_chars[url];

    std::string ret;
    ret.reserve(len_encoded);

    unsigned int pos = 0;

    while (pos < in_len) {
        ret.push_back(base64_chars_[(bytes_to_encode[pos + 0] & 0xfc) >> 2]);

        if (pos+1 < in_len) {
           ret.push_back(base64_chars_[((bytes_to_encode[pos + 0] & 0x03) << 4) + ((bytes_to_encode[pos + 1] & 0xf0) >> 4)]);

           if (pos+2 < in_len) {
              ret.push_back(base64_chars_[((bytes_to_encode[pos + 1] & 0x0f) << 2) + ((bytes_to_encode[pos + 2] & 0xc0) >> 6)]);
              ret.push_back(base64_chars_[  bytes_to_encode[pos + 2] & 0x3f]);
           }
           else {
              ret.push_back(base64_chars_[(bytes_to_encode[pos + 1] & 0x0f) << 2]);
              ret.push_back(trailing_char);
           }
        }
        else {

            ret.push_back(base64_chars_[(bytes_to_encode[pos + 0] & 0x03) << 4]);
            ret.push_back(trailing_char);
            ret.push_back(trailing_char);
        }

        pos += 3;
    }


    return ret;
}

template <typename String>
static std::string decode(String encoded_string, bool remove_linebreaks) {
 //
 // decode(…) is templated so that it can be used with String = const std::string&
 // or std::string_view (requires at least C++17)
 //

    if (encoded_string.empty()) return std::string();

    if (remove_linebreaks) {

       std::string copy(encoded_string);

       copy.erase(std::remove(copy.begin(), copy.end(), '\n'), copy.end());

       return base64_decode(copy, false);
    }

    size_t length_of_string = encoded_string.length();
    size_t pos = 0;

 //
 // The approximate length (bytes) of the decoded string might be one or
 // two bytes smaller, depending on the amount of trailing equal signs
 // in the encoded string. This approximation is needed to reserve
 // enough space in the string to be returned.
 //
    size_t approx_length_of_decoded_string = length_of_string / 4 * 3;
    std::string ret;
    ret.reserve(approx_length_of_decoded_string);

    while (pos < length_of_string) {
    //
    // Iterate over encoded input string in chunks. The size of all
    // chunks except the last one is 4 bytes.
    //
    // The last chunk might be padded with equal signs or dots
    // in order to make it 4 bytes in size as well, but this
    // is not required as per RFC 2045.
    //
    // All chunks except the last one produce three output bytes.
    //
    // The last chunk produces at least one and up to three bytes.
    //

       size_t pos_of_char_1 = pos_of_char(encoded_string[pos+1] );

    //
    // Emit the first output byte that is produced in each chunk:
    //
       ret.push_back(static_cast<std::string::value_type>( ( (pos_of_char(encoded_string[pos+0]) ) << 2 ) + ( (pos_of_char_1 & 0x30 ) >> 4)));

       if ( ( pos + 2 < length_of_string  )       &&  // Check for data that is not padded with equal signs (which is allowed by RFC 2045)
              encoded_string[pos+2] != '='        &&
              encoded_string[pos+2] != '.'            // accept URL-safe base 64 strings, too, so check for '.' also.
          )
       {
       //
       // Emit a chunk's second byte (which might not be produced in the last chunk).
       //
          unsigned int pos_of_char_2 = pos_of_char(encoded_string[pos+2] );
          ret.push_back(static_cast<std::string::value_type>( (( pos_of_char_1 & 0x0f) << 4) + (( pos_of_char_2 & 0x3c) >> 2)));

          if ( ( pos + 3 < length_of_string )     &&
                 encoded_string[pos+3] != '='     &&
                 encoded_string[pos+3] != '.'
             )
          {
          //
          // Emit a chunk's third byte (which might not be produced in the last chunk).
          //
             ret.push_back(static_cast<std::string::value_type>( ( (pos_of_char_2 & 0x03 ) << 6 ) + pos_of_char(encoded_string[pos+3])   ));
          }
       }

       pos += 4;
    }

    return ret;
}

std::string base64_decode(std::string const& s, bool remove_linebreaks) {
   return decode(s, remove_linebreaks);
}

std::string base64_encode(std::string const& s, bool url) {
   return encode(s, url);
}

std::string base64_encode_pem (std::string const& s) {
   return encode_pem(s);
}

std::string base64_encode_mime(std::string const& s) {
   return encode_mime(s);
}

#if __cplusplus >= 201703L
//
// Interface with std::string_view rather than const std::string&
// Requires C++17
// Provided by Yannic Bonenberger (https://github.com/Yannic)
//

std::string base64_encode(std::string_view s, bool url) {
   return encode(s, url);
}

std::string base64_encode_pem(std::string_view s) {
   return encode_pem(s);
}

std::string base64_encode_mime(std::string_view s) {
   return encode_mime(s);
}

std::string base64_decode(std::string_view s, bool remove_linebreaks) {
   return decode(s, remove_linebreaks);
}

#endif 

//将经过base64加密后的字符串简单加密一下，防止直接copy用网上的base64在线解码
std::string confusion_string(std::string &str){
   int length = str.length();
   string charArray = str;
   string cArr = str;
   for (int i = 0; i <length; i++) {
      if (charArray[i] >= 'b' && charArray[i] <= 'z') {
            cArr[i] = (char) (charArray[i] - 1);
      } else if (charArray[i] >= '1' && charArray[i] <= '9') {
            cArr[i] = (char) (charArray[i] - 1);
      } else if (charArray[i] == 'a') {
            cArr[i] = 'z';
      } else if (charArray[i] == '0') {
            cArr[i] = '9';
      } else if (charArray[i] == '/') {
            cArr[i] = '_';
      } else if (charArray[i] == '_') {
            cArr[i] = ':';
      } else if (charArray[i] == ':') {
            cArr[i] = '/';
      } else {
            cArr[i] = charArray[i];
      }
   }
   return cArr;

}

std::string unconfusion_str(std::string &str){
   int length = str.length();
   string charArray = str;
   string cArr = str;
   for (int i = 0; i <length; i++) {
      if (charArray[i] >= 'a' && charArray[i] <= 'y') {
            cArr[i] = (char) (charArray[i] + 1);
      } else if (charArray[i] >= '0' && charArray[i] <= '8') {
            cArr[i] = (char) (charArray[i] + 1);
      } else if (charArray[i] == 'z') {
            cArr[i] = 'a';
      } else if (charArray[i] == '9') {
            cArr[i] = '0';
      } else if (charArray[i] == '_') {
            cArr[i] = '/';
      } else if (charArray[i] == ':') {
            cArr[i] = '_';
      } else if (charArray[i] == '/') {
            cArr[i] = ':';
      } else {
            cArr[i] = charArray[i];
      }
   }
   return cArr;
}

string Response(string &str){
    const string path_1 = "/data/local/data/input";
    const string path_2 = "/data/local/tmp/pore";
    const string path_3 = "/root/usr/local/tmp";
    const string path_4 = "/sdcard/data/local/wrong/path";
    const string path_5 = "/do/you/love/my/masterpiece?";
    const string path_6 = "/data/local/tmp/pore/tmp";
    const string path_7 = "/data/local/tmp/input";
    const string path_8 = "/try/harder/fighting!";

    const string real_path = "/data/local/tmp/pore/pj3/input";

    std::string encoded = base64_encode(reinterpret_cast<const unsigned char*>(real_path.c_str()), real_path.length());
    std::string encode_1 = base64_encode(reinterpret_cast<const unsigned char*>(path_1.c_str()), path_1.length());
    std::string encode_2 = base64_encode(reinterpret_cast<const unsigned char*>(path_2.c_str()), path_2.length());
    std::string encode_3 = base64_encode(reinterpret_cast<const unsigned char*>(path_3.c_str()), path_3.length());
    std::string encode_4 = base64_encode(reinterpret_cast<const unsigned char*>(path_4.c_str()), path_4.length());
    std::string encode_5 = base64_encode(reinterpret_cast<const unsigned char*>(path_5.c_str()), path_5.length());
    std::string encode_6 = base64_encode(reinterpret_cast<const unsigned char*>(path_6.c_str()), path_6.length());
    std::string encode_7 = base64_encode(reinterpret_cast<const unsigned char*>(path_7.c_str()), path_7.length());
    std::string encode_8 = base64_encode(reinterpret_cast<const unsigned char*>(path_8.c_str()), path_8.length());

    std::string decoded = base64_decode(encoded);
    std::string decoded_1 = base64_decode(encode_1);
    std::string decoded_2 = base64_decode(encode_2);
    std::string decoded_3 = base64_decode(encode_3);
    std::string decoded_4 = base64_decode(encode_4);
    std::string decoded_5 = base64_decode(encode_5);
    std::string decoded_6 = base64_decode(encode_6);
    std::string decoded_7 = base64_decode(encode_7);
    std::string decoded_8 = base64_decode(encode_8);
// 检验那两个字符和md5
    string apkMd5 = "";
    if(str == apkMd5) {
        return confusion_string(decoded);
    }
/*************************************/
//其他错误的情况
    int a;
    srand((unsigned)time(NULL));
    a = 1 + rand()%8;
    switch (a)
    {
    case 1:
        return confusion_string(decoded_1);
        break;
    case 2:
        return confusion_string(decoded_2);
        break;
    case 3:
        return confusion_string(decoded_3);
        break;
    case 4:
        return confusion_string(decoded_4);
        break;
    case 5:
        return confusion_string(decoded_5);
        break;
    case 6:
        return confusion_string(decoded_6);
        break;
    case 7:
        return confusion_string(decoded_7);
        break;
    case 8:
        return confusion_string(decoded_8);
        break;
    
    default:
        string ddd = "wrong time!\n";
        return confusion_string(ddd);
        break;
    }

}

string Byte2str(char byte[1024]){
    string str;
    for(int i=0;byte[i]!='\0';++i){
        str.push_back(byte[i]);
    }
    cout<<str<<endl;
    return str;
}

char* str2byte(string & str){
    int len = str.length();
    char* res;
    if(len<=0) return res;
    for(int i=0;i<len;++i){
        res[i] = str[i];
    }
    return res;
}


